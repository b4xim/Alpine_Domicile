{"ast":null,"code":"import { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { memo } from '../../../utils/memo.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { frame, cancelFrame } from '../../../frameloop/frame.mjs';\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * A list of values that can be hardware-accelerated.\n */\n\nconst acceleratedValues = new Set([\"opacity\", \"clipPath\", \"filter\", \"transform\", \"backgroundColor\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\n\nconst sampleDelta = 10; //ms\n\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\n\nconst maxDuration = 20000;\n\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" || valueName === \"backgroundColor\" || !isWaapiSupportedEasing(options.ease);\n\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  let {\n    onUpdate,\n    onComplete,\n    ...options\n  } = _ref;\n  const canAccelerateAnimation = supportsWaapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== \"mirror\" && options.damping !== 0 && options.type !== \"inertia\";\n  if (!canAccelerateAnimation) return false;\n  /**\n   * TODO: Unify with js/index\n   */\n\n  let hasStopped = false;\n  let resolveFinishedPromise;\n  let currentFinishedPromise;\n  /**\n   * Resolve the current Promise every time we enter the\n   * finished state. This is WAAPI-compatible behaviour.\n   */\n\n  const updateFinishedPromise = () => {\n    currentFinishedPromise = new Promise(resolve => {\n      resolveFinishedPromise = resolve;\n    });\n  }; // Create the first finished promise\n\n\n  updateFinishedPromise();\n  let {\n    keyframes,\n    duration = 300,\n    ease,\n    times\n  } = options;\n  /**\n   * If this animation needs pre-generated keyframes then generate.\n   */\n\n  if (requiresPregeneratedKeyframes(valueName, options)) {\n    const sampleAnimation = animateValue({ ...options,\n      repeat: 0,\n      delay: 0\n    });\n    let state = {\n      done: false,\n      value: keyframes[0]\n    };\n    const pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n\n    let t = 0;\n\n    while (!state.done && t < maxDuration) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n\n    times = undefined;\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n\n  const animation = animateStyle(value.owner.current, valueName, keyframes, { ...options,\n    duration,\n\n    /**\n     * This function is currently not called if ease is provided\n     * as a function so the cast is safe.\n     *\n     * However it would be possible for a future refinement to port\n     * in easing pregeneration from Motion One for browsers that\n     * support the upcoming `linear()` easing function.\n     */\n    ease: ease,\n    times\n  });\n\n  const cancelAnimation = () => animation.cancel();\n\n  const safeCancel = () => {\n    frame.update(cancelAnimation);\n    resolveFinishedPromise();\n    updateFinishedPromise();\n  };\n  /**\n   * Prefer the `onfinish` prop as it's more widely supported than\n   * the `finished` promise.\n   *\n   * Here, we synchronously set the provided MotionValue to the end\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\n   * be removed from the element which would then revert to its old styles.\n   */\n\n\n  animation.onfinish = () => {\n    value.set(getFinalKeyframe(keyframes, options));\n    onComplete && onComplete();\n    safeCancel();\n  };\n  /**\n   * Animation interrupt callback.\n   */\n\n\n  const controls = {\n    then(resolve, reject) {\n      return currentFinishedPromise.then(resolve, reject);\n    },\n\n    attachTimeline(timeline) {\n      animation.timeline = timeline;\n      animation.onfinish = null;\n      return noop;\n    },\n\n    get time() {\n      return millisecondsToSeconds(animation.currentTime || 0);\n    },\n\n    set time(newTime) {\n      animation.currentTime = secondsToMilliseconds(newTime);\n    },\n\n    get speed() {\n      return animation.playbackRate;\n    },\n\n    set speed(newSpeed) {\n      animation.playbackRate = newSpeed;\n    },\n\n    get duration() {\n      return millisecondsToSeconds(duration);\n    },\n\n    play: () => {\n      if (hasStopped) return;\n      animation.play();\n      /**\n       * Cancel any pending cancel tasks\n       */\n\n      cancelFrame(cancelAnimation);\n    },\n    pause: () => animation.pause(),\n    stop: () => {\n      hasStopped = true;\n      if (animation.playState === \"idle\") return;\n      /**\n       * WAAPI doesn't natively have any interruption capabilities.\n       *\n       * Rather than read commited styles back out of the DOM, we can\n       * create a renderless JS animation and sample it twice to calculate\n       * its current value, \"previous\" value, and therefore allow\n       * Motion to calculate velocity for any subsequent animation.\n       */\n\n      const {\n        currentTime\n      } = animation;\n\n      if (currentTime) {\n        const sampleAnimation = animateValue({ ...options,\n          autoplay: false\n        });\n        value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n      }\n\n      safeCancel();\n    },\n    complete: () => animation.finish(),\n    cancel: safeCancel\n  };\n  return controls;\n}\n\nexport { createAcceleratedAnimation };","map":{"version":3,"sources":["/Users/basimahamed/portfolio-starter/node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs"],"names":["animateStyle","isWaapiSupportedEasing","getFinalKeyframe","animateValue","millisecondsToSeconds","secondsToMilliseconds","memo","noop","frame","cancelFrame","supportsWaapi","Object","hasOwnProperty","call","Element","prototype","acceleratedValues","Set","sampleDelta","maxDuration","requiresPregeneratedKeyframes","valueName","options","type","ease","createAcceleratedAnimation","value","onUpdate","onComplete","canAccelerateAnimation","has","repeatDelay","repeatType","damping","hasStopped","resolveFinishedPromise","currentFinishedPromise","updateFinishedPromise","Promise","resolve","keyframes","duration","times","sampleAnimation","repeat","delay","state","done","pregeneratedKeyframes","t","sample","push","undefined","animation","owner","current","cancelAnimation","cancel","safeCancel","update","onfinish","set","controls","then","reject","attachTimeline","timeline","time","currentTime","newTime","speed","playbackRate","newSpeed","play","pause","stop","playState","autoplay","setWithVelocity","complete","finish"],"mappings":"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","sourcesContent":["import { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { memo } from '../../../utils/memo.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { frame, cancelFrame } from '../../../frameloop/frame.mjs';\n\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supportsWaapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    /**\n     * TODO: Unify with js/index\n     */\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease, times } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        times = undefined;\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n        times,\n    });\n    const cancelAnimation = () => animation.cancel();\n    const safeCancel = () => {\n        frame.update(cancelAnimation);\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        onComplete && onComplete();\n        safeCancel();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        attachTimeline(timeline) {\n            animation.timeline = timeline;\n            animation.onfinish = null;\n            return noop;\n        },\n        get time() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        get speed() {\n            return animation.playbackRate;\n        },\n        set speed(newSpeed) {\n            animation.playbackRate = newSpeed;\n        },\n        get duration() {\n            return millisecondsToSeconds(duration);\n        },\n        play: () => {\n            if (hasStopped)\n                return;\n            animation.play();\n            /**\n             * Cancel any pending cancel tasks\n             */\n            cancelFrame(cancelAnimation);\n        },\n        pause: () => animation.pause(),\n        stop: () => {\n            hasStopped = true;\n            if (animation.playState === \"idle\")\n                return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            safeCancel();\n        },\n        complete: () => animation.finish(),\n        cancel: safeCancel,\n    };\n    return controls;\n}\n\nexport { createAcceleratedAnimation };\n"]},"metadata":{},"sourceType":"module"}